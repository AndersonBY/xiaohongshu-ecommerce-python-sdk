name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write  # For PyPI trusted publishing

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for changelog generation

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install PDM
      run: pipx install pdm

    - name: Configure PDM to use uv
      run: pdm config use_uv true

    - name: Install dependencies
      run: pdm install -G dev

    - name: Run tests
      run: pdm run pytest

    - name: Run linting
      run: pdm run lint

    - name: Run type checking
      run: pdm run typecheck

    - name: Update version numbers
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "Updating to version $VERSION"

        # Update pyproject.toml
        sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml

        # Update __init__.py
        sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION\"/" src/xiaohongshu_ecommerce/__init__.py

        echo "Version updated to $VERSION"

    - name: Build package
      run: pdm build

    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

        # Try to extract changelog from CHANGELOG.md first
        if [ -f "CHANGELOG.md" ]; then
          # Look for the version section in CHANGELOG.md
          VERSION=$VERSION python3 << 'EOF' > release_notes.md
        import re
        import sys
        import os

        def extract_version_changelog(version):
            try:
                with open('CHANGELOG.md', 'r', encoding='utf-8') as f:
                    content = f.read()

                # Look for version section (matches [X.X.X] or [Unreleased])
                pattern = rf'## \[{re.escape(version)}\][^\n]*\n(.*?)(?=\n## |\Z)'
                match = re.search(pattern, content, re.DOTALL)

                if match:
                    # Extract the content directly from capture group
                    changelog_content = match.group(1).strip()

                    if changelog_content:
                        print(changelog_content)
                        return True

                return False
            except Exception as e:
                print(f"Error reading CHANGELOG.md: {e}", file=sys.stderr)
                return False

        # Try to get version-specific changelog
        version = os.environ.get('VERSION', '0.0.0')
        if not extract_version_changelog(version):
            # If no specific version found, check for [Unreleased]
            if not extract_version_changelog("Unreleased"):
                print("## What's Changed\n\nSee CHANGELOG.md for detailed changes.")
        EOF
        fi

        # If CHANGELOG.md doesn't exist or doesn't have version info, generate from git
        if [ ! -s "release_notes.md" ]; then
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md

          # Generate changelog between current tag and previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -n "$PREVIOUS_TAG" ]; then
            # Get commit messages between tags
            git log --pretty=format:"- %s (%h)" ${PREVIOUS_TAG}..HEAD >> release_notes.md

            # Get contributors
            echo "" >> release_notes.md
            echo "## Contributors" >> release_notes.md
            git log --pretty=format:"- @%an" ${PREVIOUS_TAG}..HEAD | sort -u >> release_notes.md
          else
            echo "- Initial release" >> release_notes.md
          fi
        fi

        # Read changelog content and set as output
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ steps.changelog.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        files: |
          dist/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://upload.pypi.org/legacy/
        skip-existing: true